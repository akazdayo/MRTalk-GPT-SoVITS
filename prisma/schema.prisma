generator client {
  provider             = "prisma-client-py"
  previewFeatures      = ["postgresqlExtensions"]
  recursive_type_depth = "5"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector(schema: "public")]
}

model User {
  id            String      @id
  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  character     Character[]
  favorite      Favorite[]
  sessions      Session[]
  voice         Voice[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Character {
  id          String     @id @default(uuid())
  name        String
  personality String
  story       String
  postedBy    String
  modelUrl   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  isPublic   Boolean    @default(false)
  user        User       @relation(fields: [postedBy], references: [id], onDelete: Cascade)
  favorite    Favorite[]
  voice       Voice?

  @@map("character")
}

model Favorite {
  id          String    @id @default(uuid())
  characterId String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@map("favorite")
}

model Voice {
  id          String    @id @default(uuid())
  characterId String    @unique
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
  @@map("voice")
}
